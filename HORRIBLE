#include<bits/stdc++.h>
using namespace std;
long long int seg[400000],lazy[400000];
long long int n;
void upd(long long int id,long long int l,long long int r,long long int x)
{
    lazy[id]+=(long long)x;
    seg[id]+=(long long)(((long long int) r-(long long int)l)*(long long int)x) ; // since [L,R) r is exclusive that's why (r-l),only parent node is updated rest is postponed.
}
void shift(long long int id,long long int l,long long int r)  //for propagating updates to children.
{
    long long int mid=(l+r)>>1;
    upd(2*id,l,mid,lazy[id]); upd(2*id+1,mid,r,lazy[id]);
    lazy[id]=0;                   // we have completed the postponed update of children,So no more pending updates for that note and all sub-children
}
void increase(long long int x,long long int y,long long int v,long long int id=1,long long int l=0,long long int r=n)
{
    if(x>=r || y<=l) return;
    if(x<=l && y>=r) {upd(id,l,r,v); return ;}
    shift(id,l,r);
    long long int mid=(l+r)>>1;
    increase(x,y,v,2*id,l,mid); increase(x,y,v,2*id+1,mid,r);
    seg[id]=(long long)seg[2*id]+(long long)seg[2*id+1];
}
long long int sum(long long int x,long long int y,long long int id=1,long long int l=0,long long int r=n){
 if(x>=r || y<=l) return 0;
 if(x<=l && y>=r) { return seg[id];}
 shift(id,l,r);                                  //Any remaning update needed before answering a query
 long long int mid=(l+r)>>1;
 return sum(x,y,2*id,l,mid)+sum(x,y,2*id+1,mid,r);
}
int main()
{
 long long int t,c,op,v,x,y;
scanf("%lld",&t);
while(t--)
{

    scanf("%lld%lld",&n,&c);
    memset(seg,0,sizeof seg);
    memset(lazy,0,sizeof lazy);
    while(c--)
    {
        scanf("%lld",&op);
        if(op==0)
        {
              scanf("%lld%lld%lld",&x,&y,&v);
            increase(x-1,y,v);
         }
        else
        {
           scanf("%lld%lld",&x,&y);
           long long int ans;
           ans=(long long)sum(x-1,y);
           printf("%lld\n",ans);
        }
    }

}
return 0;
}
